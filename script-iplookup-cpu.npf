%info

%variables
SIZE={64, 128, 256, 512, 1024}
THREADS={1, 2, 4, 6, 8}
BATCH={128}
NDESC={2048}

%config
graph_force_diagonal_labels=true
graph_filter_by={AVG-CYCLES:LOSE-RATE}
//var_lim={LOSE-RATE:0-}
//var_lim={AVG-CYCLES:0-}
timeout=60
n_runs=5


%script sudo=true
killall -9 click
sleep 3

export LD_LIBRARY_PATH=/etinfo/users/2021/rvanhauwaert/dpdk-23.03/dpdk/install/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH
sudo /etinfo/users/2021/rvanhauwaert/fastclick/bin/click --dpdk -c 0xffff -n 4 -a 98:00.0 --file-prefix npf -- iplookup.click



%script@joyeux sudo=true delay=5

export LD_LIBRARY_PATH=/etinfo/users/2021/rvanhauwaert/dpdk-23.03/dpdk/install/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH
sudo LD_LIBRARY_PATH=$LD_LIBRARY_PATH /etinfo/users/2021/rvanhauwaert/dpdk-23.03/Pktgen-DPDK/usr/local/bin/pktgen -l 0-7 -n 4 -a 0000:01:00.0 --file-prefix npf -- -m [1/2/3:4/5/6].0 -P -f cfg.lua


%file iplookup.click
define ($ndesc 2048)
define ($threads ${THREADS})

FromDPDKDevice(0, NDESC $ndesc, MAXTHREADS $threads)
        -> Strip(14)
        -> GetIPAddress(16)
        -> r :: RadixIPLookup()
		-> ToDPDKDevice(0, NDESC $ndesc, MAXTHREADS $threads);

s :: Script(
		write r.add 0.0.0.0/0  195.66.227.148 0,
		write r.add 7.0.0.0/8  195.66.224.175 0,
		write r.add 11.0.0.0/8  195.66.224.175 0,
		write r.add 12.0.0.0/8  195.66.224.175 0,
		write r.add 17.0.0.0/8  195.66.226.147 0,
		write r.add 21.0.0.0/8  195.66.224.175 0,
		write r.add 22.0.0.0/8  195.66.224.175 0,
		write r.add 26.0.0.0/8  195.66.224.175 0,
		write r.add 28.0.0.0/8  195.66.224.175 0,
		write r.add 29.0.0.0/8  195.66.224.175 0,
		write r.add 30.0.0.0/8  195.66.224.175 0,
		write r.add 33.0.0.0/8  195.66.224.175 0,
		write r.add 38.0.0.0/8  195.66.224.175 0,
		write r.add 53.0.0.0/8  195.66.224.175 0,
		write r.add 55.0.0.0/8  195.66.224.175 0,
		write r.add 73.0.0.0/8  195.66.224.175 0,
		write r.add 214.0.0.0/8  195.66.224.175 0,
		write r.add 4.0.0.0/9  195.66.224.175 0,
		write r.add 8.0.0.0/9  195.66.224.175 0,
		write r.add 12.0.0.0/9  195.66.224.175 0,
		write r.add 12.128.0.0/9  195.66.224.175 0,
		write r.add 17.0.0.0/9  195.66.226.147 0,
		write r.add 17.128.0.0/9  195.66.226.147 0,
		write r.add 32.0.0.0/9  195.66.224.175 0,
		write r.add 44.0.0.0/9  195.66.224.175 0,
		write r.add 50.128.0.0/9  195.66.224.175 0,
		write r.add 97.128.0.0/9  195.66.224.175 0,
)


%file cfg.lua
package.path = package.path .. ";/etinfo/users/2021/rvanhauwaert/yeah/Pktgen-DPDK/?.lua"
require("Pktgen")


-- Set random seed
math.randomseed(os.time())

local first_byte = math.random(1, 255)
local second_byte = math.random(1, 255)
local third_byte = math.random(1, 255)
local dstip = 1234
-- Generate a random source IP address
local first_byte = math.random(1, 255)
local second_byte = math.random(1, 255)
local third_byte = math.random(1, 255)
local fourth_byte = math.random(1, 255)
local srcip = 4321
-- Writting packet length in dstmac field (60 bytes packets)
local dstmac = "00:00:3C:00:00:00"
local srcmac = "04:3f:72:dc:4a:65"
--  3c:ec:ef:97:ee:90 joyeux

-- =================== Generic Info ===================
pktgen.ports_per_page(1)

pktgen.range.dst_mac("all", "start", dstmac)
pktgen.range.src_mac("all", "start", srcmac)

pktgen.set_range("all", "on")

pktgen.range.src_ip("all", "start", "1.1.1.1")
pktgen.range.src_ip("all", "min", "1.1.1.1")
pktgen.range.src_ip("all", "inc", "0.0.0.1")
pktgen.range.src_ip("all", "max", "255.255.255.255")

-- For some reason, the simple start statement does not work
-- I had to set min, max to the same value and increment to 0
pktgen.range.dst_ip("all", "start", "1.1.1.1")
pktgen.range.dst_ip("all", "min", "1.1.1.1")
pktgen.range.dst_ip("all", "inc", "0.0.0.1")
pktgen.range.dst_ip("all", "max", "255.255.255.255")

pktgen.range.ip_proto("all", "tcp")

pktgen.range.pkt_size("all", "start", ${SIZE})
pktgen.range.pkt_size("all", "inc", 0)
pktgen.range.pkt_size("all", "min", ${SIZE})
pktgen.range.pkt_size("all", "max", ${SIZE})

pktgen.range.dst_port("0", "start", 1024)
pktgen.range.dst_port("0", "inc", 1)
pktgen.range.dst_port("0", "min", 1024)
pktgen.range.dst_port("0", "max", 1500)

-- Source port iterates over the list of ports
pktgen.range.src_port("0", "start", 2048)
pktgen.range.src_port("0", "inc", 1)
pktgen.range.src_port("0", "min", 2048)
pktgen.range.src_port("0", "max", 2048)

-- Set the rate to 20%
-- pktgen.set("all", "rate", ${RATE})
-- pktgen.set("all", "count", 30000000)

-- Settings latency stuff
pktgen.latency(0, "enable");
pktgen.latency(0, "rate", 1000);
pktgen.latency(0, "entropy", 12);
pktgen.latency(0, "enable");
pktgen.latency(0, "rate", 10000);
pktgen.latency(0, "entropy", 8);

pktgen.delay(100)
pktgen.start("all")

pktgen.delay(15000)

pktgen.stop("0")

statRx = pktgen.portStats(0, "port")[0]
pkt_stats = pktgen.pktStats(0)
avg_cycles = pkt_stats[0].latency.avg_cycles
num_rx = statRx.ipackets
num_tx = statRx.opackets
mbits_rx = pktgen.portStats("all", "rate")[0].mbits_rx
print("\n\n RESULT-RX-NB-PKT " .. num_rx / 15 .. "\n\n")
print("\n\n RESULT-RX-RATE " .. num_rx / 15 * 8 * ${SIZE} / 1000000000 .. "\n\n")
print("\n\n RESULT-LAT " .. avg_cycles / 3000000000 .. "\n\n")
print("\n\n RESULT-LOSE-RATE " .. 1-(num_rx / (num_tx)) .. "\n\n")

pktgen.quit()
