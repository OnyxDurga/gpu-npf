%info
Ethernet Mirror on GPU using communication lists


%variables
RATE={100,0.1}
SIZE={64, 256, 1024}
NTHREADS={1, 4, 16}
BATCH={64, 256, 1024}
CAPACITY={256}
LISTS_PER_CORE={1,4,16}
MEMPOOL_GPU={true,false}
PERSISTENT_KERNEL={true,false}


%config
graph_force_diagonal_labels=true
var_lim={RESULT-RX-RATE:0,RESULT-LOSE-RATE:0}
timeout=60
n_runs=2


%script sudo=true
killall -9 click
sleep 1
export LD_LIBRARY_PATH=/etinfo/users/2021/mvanliefde/dpdk/install_sauron/lib/x86_64-linux-gnu/
export GDRCOPY_PATH_L=/etinfo/users/2021/mvanliefde/gdrcopy-sauron/lib/
sudo -E LD_LIBRARY_PATH=$LD_LIBRARY_PATH GDRCOPY_PATH_L=$GDRCOPY_PATH_L /etinfo/users/2021/mvanliefde/fastclick-gpu/bin/click --dpdk -l 16-31 -n 4 -a c1:00.0 -a a1:00.0 --file-prefix npf -- gpu-bounce-commlist.click


%script@joyeux sudo=true delay=5
killall -9 pktgen
export LD_LIBRARY_PATH=/etinfo/users/2021/rvanhauwaert/dpdk-23.03/dpdk/install-sam/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH
sudo LD_LIBRARY_PATH=$LD_LIBRARY_PATH /etinfo/users/2021/rvanhauwaert/dpdk-23.03/Pktgen-DPDK/usr/local/bin/pktgen -l 0-7 -n 4 -a 0000:01:00.0 --file-prefix npf -- -m [1/2/3:4/5/6].0 -P -f cfg.lua


%file gpu-bounce-commlist.click
// Size of the mempool to allocate
define ($nb_mbuf 65535)

// Number of descriptors per ring
define ($ndesc 2048)

// A batch must contain at most 1024 packets
define ($batch ${BATCH})
define ($burst 32)
define ($minbatch $((${BATCH}-32))) // has to be $batch - $burst

// number of cores receiving and processing packets
define ($maxthreads ${NTHREADS})

// each thread has `lists_per_core` lists of size `capacity`
define ($capacity ${CAPACITY})
define ($lists_per_core ${LISTS_PER_CORE})

// If true, NIC stores packets directly in GPU memory
define ($gpudirect_rdma ${MEMPOOL_GPU})

// Control Flow
define ($persistent_kernel ${PERSISTENT_KERNEL})


info :: DPDKInfo($nb_mbuf, MEMPOOL_GPU $gpudirect_rdma)

FromDPDKDevice(0, NDESC $ndesc, MAXTHREADS $maxthreads, BURST $burst, NUMA false) 
    -> MinBatch($minbatch, TIMER 1000) 
    -> GPUEtherMirrorCommList(VERBOSE false, PERSISTENT_KERNEL $persistent_kernel, CAPACITY $capacity, MAX_BATCH $batch, LISTS_PER_CORE $lists_per_core) 
    -> ToDPDKDevice(0, NDESC $ndesc, MAXTHREADS $maxthreads, BLOCKING false)


%file cfg.lua
package.path = package.path .. ";/etinfo/users/2021/rvanhauwaert/dpdk-23.03/Pktgen-DPDK/?.lua"
require("Pktgen")

-- Set random seed
math.randomseed(os.time())

local first_byte = math.random(1, 255)
local second_byte = math.random(1, 255)
local third_byte = math.random(1, 255)
-- local dstip = 1234
-- Generate a random source IP address
local first_byte = math.random(1, 255)
local second_byte = math.random(1, 255)
local third_byte = math.random(1, 255)
local fourth_byte = math.random(1, 255)
-- local srcip = 4321
-- Writting packet length in dstmac field (60 bytes packets)
local srcmac = "10:70:fd:c3:f1:48"
local dstmac = "08:c0:eb:bf:ee:c2"

TIME = 10
RATE = ${RATE}
PKT_SIZE = ${SIZE}

-- =================== Generic Info ===================
pktgen.ports_per_page(1)

pktgen.range.dst_mac("0", "start", dstmac)
pktgen.range.src_mac("0", "start", srcmac)

pktgen.set_range("0", "on")

pktgen.range.src_ip("0", "start", "1.2.3.4")
pktgen.range.src_ip("0", "min", "0.0.0.0")
pktgen.range.src_ip("0", "inc", "0.1.1.1")
pktgen.range.src_ip("0", "max", "255.255.255.255")

-- For some reason, the simple start statement does not work
-- I had to set min, max to the same value and increment to 0
pktgen.range.dst_ip("0", "start", "5.6.7.8")
pktgen.range.dst_ip("0", "min", "0.0.0.0")
pktgen.range.dst_ip("0", "inc", "0.1.1.1")
pktgen.range.dst_ip("0", "max", "255.255.255.255")

pktgen.range.ip_proto("0", "udp")

pktgen.range.pkt_size("0", "start", PKT_SIZE)
pktgen.range.pkt_size("0", "inc", 0)
pktgen.range.pkt_size("0", "min", PKT_SIZE)
pktgen.range.pkt_size("0", "max", PKT_SIZE)

pktgen.range.dst_port("0", "start", 1024)
pktgen.range.dst_port("0", "inc", 1)
pktgen.range.dst_port("0", "min", 1024)
pktgen.range.dst_port("0", "max", 1500)

-- Source port iterates over the list of ports
pktgen.range.src_port("0", "start", 2048)
pktgen.range.src_port("0", "inc", 1)
pktgen.range.src_port("0", "min", 2048)
pktgen.range.src_port("0", "max", 2048)


-- Set the rate of pkts
pktgen.set("0", "rate", RATE)

-- Settings latency stuff
pktgen.latency(0, "enable");
pktgen.latency(0, "rate", 10000);
pktgen.latency(0, "entropy", 8);
pktgen.delay(100)
pktgen.start("0")

pktgen.delay(TIME * 1000)

pktgen.stop("0")

statRx = pktgen.portStats(0, "port")[0]
num_rx = statRx.ipackets
num_tx = statRx.opackets
ibytes_rx = statRx.ibytes

-- compute average rate during the time of experience
-- see iBitsTotal in pktgen.h:114
-- PKT_OVERHEAD_SIZE = 24
mbps_rx = ((num_rx * 24) + ibytes_rx) / TIME * 8 / 1000000

-- latency
pkt_stats = pktgen.pktStats(0)
avg_cycles = pkt_stats[0].latency.avg_cycles
avg_us = pkt_stats[0].latency.avg_us

print(" RESULT-RX-RATE-PPS " .. math.floor(num_rx / TIME))
print(" RESULT-RX-RATE-MBPS " .. mbps_rx)
print(" RESULT-LOSE-RATE " .. 1-(num_rx / (num_tx)) .. "")
print(" RESULT-AVG-LAT " .. avg_us .. "us")

pktgen.quit()
