%info

%variables
RATE=100

SIZE=256
THREADS=1

BATCH=1024
LISTS={1, 2, 4, 8, 16, 32}

%config
graph_force_diagonal_labels=true
graph_filter_by={AVG-CYCLES:LOSE-RATE}
var_lim={RESULT-RX-RATE:0-,RESULT-LOSE-RATE:0-}
timeout=60
n_runs=5






%script sudo=true
killall -9 click
sleep 3

export LD_LIBRARY_PATH=/etinfo/users/2021/mvanliefde/dpdk/install/lib/x86_64-linux-gnu/
sudo GDRCOPY_PATH_L=/etinfo/users/2021/mvanliefde/gdrcopy/lib /etinfo/users/2021/mvanliefde/fastclick-gpu/bin/click --dpdk -c 0xfffff -n 4 -a 01:00.0 -a 02:00.0 --file-prefix npf -- gpu-bounce.click


%script@joyeux sudo=true delay=5

export LD_LIBRARY_PATH=/etinfo/users/2021/rvanhauwaert/dpdk-23.03/dpdk/install/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH
sudo LD_LIBRARY_PATH=$LD_LIBRARY_PATH /etinfo/users/2021/rvanhauwaert/dpdk-23.03/Pktgen-DPDK/usr/local/bin/pktgen -l 0-7 -n 4 -a 0000:01:00.1 --file-prefix npf -- -m [1/2/3:4/5/6].0 -P -f cfg.lua





%file gpu-bounce.click
/**
 * This simple configuration bounces packets from a single interface to itself
 * MAC addresses are inverted using GPU
 *
 * A minimal launch line would be:
 * sudo bin/click --dpdk -- conf/cuda/gpu-bounce.click
 */

 // Size of the mempool to allocate
 define ($nb_mbuf 65535)
 
 // Number of descriptors per ring
 define ($ndesc 2048)
 
 // A batch must contain at most 1024 packets
 define ($batch ${BATCH})     // VAR 32 à 1024 par puissances de 2
 define ($burst 32)
 define ($minbatch $((${BATCH}-32))) // has to be $batch - $burst
 
 define ($maxthreads ${THREADS})  // VAR 1 2 3 4 
 
 define ($capacity 128) // VAR 1024 2048 4086 8192, avec autres paramètres fixés: threads 3, batch 128
 
 FromDPDKDevice(0, NDESC $ndesc, MAXTHREADS $maxthreads, BURST $burst) 
     -> MinBatch($minbatch, TIMER 1000) 
     -> GPUEtherMirrorCommList(VERBOSE false, CAPACITY $capacity, MAX_BATCH $batch, LISTS_PER_CORE ${LISTS})
     -> ToDPDKDevice(0, NDESC $ndesc, MAXTHREADS $maxthreads, BLOCKING false)
 
 /* For debug purposes */
 // Script(TYPE ACTIVE, read load, read info.pool_count, wait 1s, loop);




%file cfg.lua
package.path = package.path .. ";/etinfo/users/2021/rvanhauwaert/yeah/Pktgen-DPDK/?.lua"
require("Pktgen")


-- Set random seed
math.randomseed(os.time())

local first_byte = math.random(1, 255)
local second_byte = math.random(1, 255)
local third_byte = math.random(1, 255)
local dstip = 1234
-- Generate a random source IP address
local first_byte = math.random(1, 255)
local second_byte = math.random(1, 255)
local third_byte = math.random(1, 255)
local fourth_byte = math.random(1, 255)
local srcip = 4321
-- Writting packet length in dstmac field (60 bytes packets)
local dstmac = "30:00:3C:00:00:01"
local srcmac = "40:00:2C:00:00:00"

TIME = 15
RATE = ${RATE}
PKT_SIZE = ${SIZE}

-- =================== Generic Info ===================
pktgen.ports_per_page(1)

pktgen.range.dst_mac("0", "start", dstmac)
pktgen.range.src_mac("0", "start", srcmac)

pktgen.set_range("0", "on")

pktgen.range.src_ip("0", "start", "1.2.3.4")
pktgen.range.src_ip("0", "min", "0.0.0.0")
pktgen.range.src_ip("0", "inc", "0.0.0.1")
pktgen.range.src_ip("0", "max", "255.255.255.255")

-- For some reason, the simple start statement does not work
-- I had to set min, max to the same value and increment to 0
pktgen.range.dst_ip("0", "start", "5.6.7.8")
pktgen.range.dst_ip("0", "min", "0.0.0.0")
pktgen.range.dst_ip("0", "inc", "0.0.0.1")
pktgen.range.dst_ip("0", "max", "255.255.255.255")

pktgen.range.ip_proto("0", "tcp")

pktgen.range.pkt_size("0", "start", PKT_SIZE)
pktgen.range.pkt_size("0", "inc", 0)
pktgen.range.pkt_size("0", "min", PKT_SIZE)
pktgen.range.pkt_size("0", "max", PKT_SIZE)

pktgen.range.dst_port("0", "start", 1024)
pktgen.range.dst_port("0", "inc", 1)
pktgen.range.dst_port("0", "min", 1024)
pktgen.range.dst_port("0", "max", 1500)

-- Source port iterates over the list of ports
pktgen.range.src_port("0", "start", 2048)
pktgen.range.src_port("0", "inc", 1)
pktgen.range.src_port("0", "min", 2048)
pktgen.range.src_port("0", "max", 2048)

-- Set the rate/amount of pkts
pktgen.set("0", "rate", RATE)
-- pktgen.set("0", "count", 5)

pktgen.delay(100)
pktgen.start("0")

pktgen.delay(TIME * 1000)

pktgen.stop("0")

statRx = pktgen.portStats(0, "port")[0]
num_rx = statRx.ipackets
num_tx = statRx.opackets
print("\n\n RESULT-RX-RATE " .. num_rx / TIME * 8 * PKT_SIZE / 1000000000 .. "\n\n")
print("\n\n RESULT-LOSE-RATE " .. 1-(num_rx / (num_tx)) .. "\n\n")

pktgen.quit()